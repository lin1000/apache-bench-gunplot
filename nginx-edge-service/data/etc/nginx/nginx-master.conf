
user  root;
worker_processes  2;
worker_rlimit_nofile    8000;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  4096;
}


http {

    resolver 127.0.0.11;

    # looks for lua package
    lua_package_path '/root/lua/?.lua;/data/lib/lua/?.lua;';    

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /role_data/logs/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    upstream api_upstream {
        server api-standalone:8081;
    }    
    
    server {
        listen 80;
        server_name localhost;

        #logging section
        rewrite_log on;
        error_log    /role_data/logs/nginx/error.log warn;

        # partial match case
        # location / {
        #     proxy_http_version 1.1  ;
        #     proxy_pass http://lin1000_upstream; # assigned to predefined upstream and protocol
        #     proxy_redirect     off;
        #     proxy_set_header   Host $host;
        #     proxy_set_header   X-Real-IP $remote_addr;
        #     proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header   X-Forwarded-Host $server_name;            
        # }       

        # exactly match case
        location =/ {
            root /usr/share/nginx/html;
        }

        # Test on echo-nginx-module
        location /echo {
            add_header Content-Disposition "inline";
            add_header Content-Type "text/plain";

            echo_sleep 3;
            echo $host;
            echo $remote_addr;
            echo $server_addr;
            echo "(Master) Response Text Updated";
            #proxy_pass http://localhost/urltest;
        }        

        location = /foo {         
            return 200 'gangnam style!';
            # because default content-type is application/octet-stream,
            # browser will offer to "save the file"...
            # if you want to see reply in browser, uncomment next line 
            add_header Content-Type text/plain;            
        }

        location = /hello {
            default_type 'text/plain';
            content_by_lua 'ngx.say("hello, lua, reload")';
        }

        location = /hello/redis {
            default_type 'text/plain';
            redis2_query set hello world;
            redis2_query get hello;
            redis2_pass 172.16.238.100:6379;
        }

        location = /rewrite_lua {
            default_type 'text/plain';
            rewrite_by_lua_file /data/lib/lua/test_rewrite_vid.lua;

        }

        location = /hello/redis_lua {
            default_type 'text/plain';
            content_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 sec

                -- or connect to a unix domain socket file listened
                -- by a redis server:
                --     local ok, err = red:connect("unix:/path/to/redis.sock")

                local ok, err = red:connect("172.16.238.100", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                local count
                count, err = red:get_reused_times()
                ngx.say("get_reused_times count: ", count)
                if 0 == count then
                    ok, err = red:auth("q1w2e3r4")
                    if not ok then
                        ngx.say("failed to auth: ", err)
                        return
                    end
                elseif err then
                    ngx.say("failed to get reused times: ", err)
                    return
                end

                ok, err = red:set("dog", "an animal")
                if not ok then
                    ngx.say("failed to set dog: ", err)
                    return
                end

                ngx.say("set result: ", ok)

                local res, err = red:get("dog")
                if not res then
                    ngx.say("failed to get dog: ", err)
                    return
                end

                if res == ngx.null then
                    ngx.say("dog not found.")
                    return
                end

                ngx.say("dog: ", res)

                red:init_pipeline()
                red:set("cat", "Marry")
                red:set("horse", "Bob")
                red:get("cat")
                red:get("horse")
                local results, err = red:commit_pipeline()
                if not results then
                    ngx.say("failed to commit the pipelined requests: ", err)
                    return
                end

                for i, res in ipairs(results) do
                    if type(res) == "table" then
                        if res[1] == false then
                            ngx.say("failed to run command ", i, ": ", res[2])
                        else
                            ngx.say("process the table value.", i, res)
                            -- process the table value
                        end
                    else
                        ngx.say("process the scalar value.", i, res)
                        -- process the scalar value
                    end
                end

                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(100000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

                -- or just close the connection right away:
                -- local ok, err = red:close()
                -- if not ok then
                --     ngx.say("failed to close: ", err)
                --     return
                -- end
            }

        } 

        location /relua {
            set $apihost 9.203.8.176;
            default_type 'text/plain';
            #rewrite ^/relua/(.*) /urltest break;
            rewrite_by_lua_file /data/lib/lua/test_rewrite.lua;
            proxy_pass http://localhost;
        } 

        location /urltest {
            default_type 'text/plain';
            content_by_lua_file /data/lib/lua/test_vid.lua;
        }                                 


        #Proxy /api to api_upstream/api_view
        #(Q) However, the successive conntections are not proxied unless specified explicitly.
        location /api {
            proxy_redirect off;
            proxy_set_header        Host            $host;
            proxy_set_header        X-Real-IP       $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;            
            # proxy_pass http://9.203.8.176:5080; (not chage uri)
            #proxy_pass http://api_upstream/v1/common/test;
            proxy_pass $scheme://api_upstream/api_view;
            proxy_set_header content-type "application/json";
        } 

        #Proxy the WebSocket Connection
        #https://www.nginx.com/blog/websocket-nginx/
        location /socket.io/ {
            proxy_pass $scheme://api_upstream;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
        }         

        #Proxy the static content from api-standalone
        location /static {
            proxy_redirect off;
            proxy_set_header        Host            $host;
            proxy_set_header        X-Real-IP       $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;            
            proxy_pass $scheme://api_upstream;
        }                 

        location /kafkatest {
            default_type 'text/plain';
            content_by_lua_file /data/lib/lua/test_kafka.lua;
        }         
        
    }      
   
    ## second server also listening on port 
    server {
        listen 80;
        server_name 127.0.0.1;
        # Test on echo-nginx-module
        location /echo {
            add_header Content-Disposition "inline";
            add_header Content-Type "text/plain";
            echo $host;
            echo $remote_addr;
            echo $server_addr;
            echo "it's not the default server, it's 127.0.0.1 server";
        }    
    }

    include /etc/nginx/conf.d/*.conf;
    include /data/etc/nginx/conf.d/*.conf;

    #customized
    #autoindex on;
}
